{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/lekhu/Documents/David/Jobportal-Mobile-App/screens/profileStacks/login.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport AppBtn from \"../../shared/appBtn\";\nimport ErrorText from \"../../shared/errorText\";\nimport ContainerFluid from \"../../shared/containerFluid\";\nimport FormGroup from \"../../shared/formGroup\";\nimport { ThemeContext } from \"../../contexts/ThemeContext\";\nimport { AuthContext } from \"../../contexts/AuthContext\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport Input from \"../../shared/input\";\nimport ErrorMessage from \"../../shared/errorMessage\";\nimport useErrorHandler from \"../../utils/custom-hooks/ErrorHandler\";\nimport { serializeErrors } from \"../../utils/Helpers\";\nimport { apiPath } from \"../../utils/constants/Consts\";\nimport Axios from \"axios\";\nimport { globalStyles } from \"../../styles/globalStyles\";\nvar loginSchema = yup.object({\n  email: yup.string().required(\"Email is required\").email(\"Please enter valid email\"),\n  password: yup.string().required(\"Password is required\")\n});\n\nfunction Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(ThemeContext),\n      isThemeDark = _useContext.isThemeDark;\n\n  var _useContext2 = useContext(AuthContext),\n      setAuthStatus = _useContext2.setAuthStatus;\n\n  var _useErrorHandler = useErrorHandler(null),\n      error = _useErrorHandler.error,\n      showError = _useErrorHandler.showError;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSubmitting = _useState2[0],\n      setIsSubmitting = _useState2[1];\n\n  var handleLogin = function handleLogin(values, actions) {\n    setIsSubmitting(true);\n    var email = values.email,\n        password = values.password;\n\n    _loginUser({\n      email: email,\n      password: password,\n      entity: \"jobseeker\"\n    }).then(function (user) {\n      console.log(user);\n\n      if (user && user.token) {\n        var _email = user.email,\n            name = user.name,\n            profile = user.profile,\n            token = user.token,\n            cv = user.cv;\n        setAuthStatus({\n          email: _email,\n          name: name,\n          profile: profile,\n          token: token,\n          hasCV: cv ? true : false\n        }).then(function () {\n          actions.resetForm();\n          navigation.navigate(\"ProfileTab\", {\n            screen: \"Profile\"\n          });\n        });\n      }\n    }).catch(function (err) {\n      return console.log(\"Error\");\n    }).then(function () {\n      setIsSubmitting(false);\n    });\n  };\n\n  var _loginUser = function _loginUser(data) {\n    var url, result;\n    return _regeneratorRuntime.async(function _loginUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            url = apiPath + \"/login\";\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Axios.post(url, data).then(function (res) {\n              return res.data;\n            }));\n\n          case 4:\n            result = _context.sent;\n\n            if (!(result.resp == 1)) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", result.user);\n\n          case 7:\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (Axios.isCancel(_context.t0)) {\n              console.log(\"Request cancelled\");\n            } else if (_context.t0.response) {\n              if (_context.t0.response.status == 422) showError(serializeErrors(_context.t0.response.data));else if (_context.t0.response.data.resp == 0) showError(serializeErrors({\n                error: _context.t0.response.data.message\n              }));else showError(serializeErrors({\n                error: \"Failed to login\"\n              }));\n            } else {\n              console.log(_context.t0);\n            }\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  return React.createElement(ContainerFluid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: globalStyles.flexGrow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return Keyboard.dismiss();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: _objectSpread(_objectSpread({}, globalStyles.authForm), {}, {\n      backgroundColor: isThemeDark ? \"#000\" : \"#36485f\"\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, error && React.createElement(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 23\n    }\n  }, error), React.createElement(Formik, {\n    initialValues: {\n      password: \"\",\n      email: \"\"\n    },\n    validationSchema: loginSchema,\n    onSubmit: function onSubmit(values, actions) {\n      handleLogin(values, actions);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit;\n    return React.createElement(React.Fragment, null, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, React.createElement(Input, {\n      value: values.email,\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }), touched.email && errors.email ? React.createElement(ErrorText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }\n    }, errors.email) : null), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 19\n      }\n    }, React.createElement(Input, {\n      value: values.password,\n      onChangeText: handleChange(\"password\"),\n      onBlur: handleBlur(\"password\"),\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }), touched.password && errors.password ? React.createElement(ErrorText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 23\n      }\n    }, errors.password) : null), React.createElement(View, {\n      style: {\n        marginTop: 20,\n        paddingHorizontal: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, React.createElement(AppBtn, {\n      title: \"Login\",\n      onPress: handleSubmit,\n      disabled: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    })));\n  })))));\n}\n\nexport default Login;","map":{"version":3,"sources":["/home/lekhu/Documents/David/Jobportal-Mobile-App/screens/profileStacks/login.js"],"names":["React","useContext","useState","AppBtn","ErrorText","ContainerFluid","FormGroup","ThemeContext","AuthContext","Formik","yup","Input","ErrorMessage","useErrorHandler","serializeErrors","apiPath","Axios","globalStyles","loginSchema","object","email","string","required","password","Login","navigation","isThemeDark","setAuthStatus","error","showError","isSubmitting","setIsSubmitting","handleLogin","values","actions","_loginUser","entity","then","user","console","log","token","name","profile","cv","hasCV","resetForm","navigate","screen","catch","err","data","url","post","res","result","resp","isCancel","response","status","message","flexGrow","Keyboard","dismiss","authForm","backgroundColor","errors","touched","handleChange","handleBlur","handleSubmit","marginTop","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport {\n  View,\n  TouchableWithoutFeedback,\n  Keyboard,\n  ScrollView,\n} from \"react-native\";\nimport AppBtn from \"../../shared/appBtn\";\nimport ErrorText from \"../../shared/errorText\";\nimport ContainerFluid from \"../../shared/containerFluid\";\nimport FormGroup from \"../../shared/formGroup\";\nimport { ThemeContext } from \"../../contexts/ThemeContext\";\nimport { AuthContext } from \"../../contexts/AuthContext\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport Input from \"../../shared/input\";\nimport ErrorMessage from \"../../shared/errorMessage\";\nimport useErrorHandler from \"../../utils/custom-hooks/ErrorHandler\";\nimport { serializeErrors } from \"../../utils/Helpers\";\nimport { apiPath } from \"../../utils/constants/Consts\";\nimport Axios from \"axios\";\nimport { globalStyles } from \"../../styles/globalStyles\";\n\n//login validation schema\nconst loginSchema = yup.object({\n  email: yup\n    .string()\n    .required(\"Email is required\")\n    .email(\"Please enter valid email\"),\n  password: yup.string().required(\"Password is required\"),\n});\n\nfunction Login({ navigation }) {\n  const { isThemeDark } = useContext(ThemeContext);\n  const { setAuthStatus } = useContext(AuthContext);\n  const { error, showError } = useErrorHandler(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  //handle user login form submit\n  const handleLogin = (values, actions) => {\n    setIsSubmitting(true);\n    const { email, password } = values;\n\n    _loginUser({ email, password, entity: \"jobseeker\" })\n      .then((user) => {\n        console.log(user);\n        //update authUser value provided user and user token\n        if (user && user.token) {\n          const { email, name, profile, token, cv } = user;\n\n          setAuthStatus({\n            email,\n            name,\n            profile,\n            token,\n            hasCV: cv ? true : false\n          }).then(() => {\n            //reset form\n            actions.resetForm();\n            //navigate to profile\n            navigation.navigate(\"ProfileTab\", {\n              screen: \"Profile\",\n            });\n          });\n        }\n      })\n      .catch((err) => console.log(\"Error\"))\n      .then(() => {\n        setIsSubmitting(false);\n      });\n  };\n\n  //aync login user\n  const _loginUser = async (data) => {\n    try {\n      let url = `${apiPath}/login`;\n      const result = await Axios.post(url, data).then((res) => res.data);\n      if (result.resp == 1) return result.user;\n    } catch (err) {\n      if (Axios.isCancel(err)) {\n        console.log(\"Request cancelled\");\n      } else if (err.response) {\n        if (err.response.status == 422)\n          showError(serializeErrors(err.response.data));\n        else if (err.response.data.resp == 0)\n          showError(serializeErrors({ error: err.response.data.message }));\n        else showError(serializeErrors({ error: \"Failed to login\" }));\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <ContainerFluid>\n      <ScrollView contentContainerStyle={globalStyles.flexGrow}>\n        <TouchableWithoutFeedback onPress={() => Keyboard.dismiss()}>\n          <View\n            style={{\n              ...globalStyles.authForm,\n              backgroundColor: isThemeDark ? \"#000\" : \"#36485f\",\n            }}\n          >\n            {error && <ErrorMessage>{error}</ErrorMessage>}\n\n            <Formik\n              initialValues={{\n                password: \"\",\n                email: \"\",\n              }}\n              validationSchema={loginSchema}\n              onSubmit={(values, actions) => {\n                handleLogin(values, actions);\n              }}\n            >\n              {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n              }) => (\n                <>\n                  <FormGroup>\n                    <Input\n                      value={values.email}\n                      onChangeText={handleChange(\"email\")}\n                      onBlur={handleBlur(\"email\")}\n                      placeholder={\"Email\"}\n                    />\n                    {touched.email && errors.email ? (\n                      <ErrorText>{errors.email}</ErrorText>\n                    ) : null}\n                  </FormGroup>\n\n                  <FormGroup>\n                    <Input\n                      value={values.password}\n                      onChangeText={handleChange(\"password\")}\n                      onBlur={handleBlur(\"password\")}\n                      placeholder={\"Password\"}\n                      secureTextEntry={true}\n                    />\n                    {touched.password && errors.password ? (\n                      <ErrorText>{errors.password}</ErrorText>\n                    ) : null}\n                  </FormGroup>\n\n                  <View style={{ marginTop: 20, paddingHorizontal: 10 }}>\n                    <AppBtn\n                      title=\"Login\"\n                      onPress={handleSubmit}\n                      disabled={false}\n                    />\n                  </View>\n                </>\n              )}\n            </Formik>\n          </View>\n        </TouchableWithoutFeedback>\n      </ScrollView>\n    </ContainerFluid>\n  );\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}