{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/lekhu/Documents/David/Jobportal-Mobile-App/screens/homeStacks/home.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ContainerFluid from \"../../shared/containerFluid\";\nimport JobBox from \"../../shared/jobBox\";\nimport AppText from \"../../shared/appText\";\nimport { useFocusEffect, CommonActions } from \"@react-navigation/native\";\nimport Axios from \"axios\";\nimport { apiPath } from \"../../utils/constants/Consts\";\nimport Loader from \"../../shared/loader\";\n\nfunction Home(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      jobs = _useState4[0],\n      setJobs = _useState4[1];\n\n  var _fetchJobs = function _fetchJobs() {\n    var data;\n    return _regeneratorRuntime.async(function _fetchJobs$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Axios.get(apiPath + \"/mobile-app-home\").then(function (res) {\n              return res.data;\n            }));\n\n          case 3:\n            data = _context.sent;\n\n            if (!(data.resp == 1)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", data.jobs);\n\n          case 6:\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var _searchJobs = function _searchJobs(data) {\n    var url, response;\n    return _regeneratorRuntime.async(function _searchJobs$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            url = apiPath + \"/mobile-search\";\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(Axios.post(url, data).then(function (res) {\n              return res.data;\n            }));\n\n          case 4:\n            response = _context2.sent;\n\n            if (!(response.resp == 1)) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", response.jobs);\n\n          case 7:\n            _context2.next = 12;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var gotoJobDetail = function gotoJobDetail(jobSlug) {\n    navigation.navigate(\"HomeTab\", {\n      screen: \"JobDetail\",\n      params: {\n        jobSlug: jobSlug\n      }\n    });\n  };\n\n  var getRouteParams = function getRouteParams() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$title = _ref2.title,\n        title = _ref2$title === void 0 ? null : _ref2$title,\n        _ref2$category = _ref2.category,\n        category = _ref2$category === void 0 ? null : _ref2$category,\n        _ref2$type = _ref2.type,\n        type = _ref2$type === void 0 ? null : _ref2$type,\n        _ref2$level = _ref2.level,\n        level = _ref2$level === void 0 ? null : _ref2$level;\n\n    var jobTitle = title;\n    var jobCat = category && [category];\n    var jobType = type && [type];\n    var jobLevel = level && [level];\n    return {\n      keyword: jobTitle,\n      category: jobCat,\n      type: jobType,\n      level: jobLevel\n    };\n  };\n\n  useFocusEffect(React.useCallback(function () {\n    var isActive = true;\n    var isSearching = false;\n\n    var _ref3 = route.params ? getRouteParams(route.params) : {},\n        keyword = _ref3.keyword,\n        category = _ref3.category,\n        type = _ref3.type,\n        level = _ref3.level;\n\n    isSearching = keyword || category || type || level ? true : false;\n\n    if (isSearching) {\n      _searchJobs({\n        keyword: keyword,\n        category: category,\n        type: type,\n        level: level\n      }).then(function (jobs) {\n        if (isActive && jobs) setJobs(jobs);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    } else {\n      _fetchJobs().then(function (jobs) {\n        if (isActive && jobs) setJobs(jobs);\n      }).catch(function (err) {\n        return console.log(err);\n      }).then(function () {\n        return setIsLoading(false);\n      });\n    }\n\n    return function () {\n      isActive = false;\n    };\n  }, [route]));\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    navigation.dispatch(CommonActions.setParams({\n      category: null,\n      title: null,\n      type: null,\n      level: null\n    }));\n    setRefreshing(false);\n  }, [refreshing, navigation]);\n  return React.createElement(ContainerFluid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, isLoading ? React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }) : React.createElement(FlatList, {\n    data: jobs,\n    keyExtractor: function keyExtractor(item) {\n      return item.id.toString();\n    },\n    renderItem: function renderItem(_ref4) {\n      var item = _ref4.item;\n      return React.createElement(JobBox, {\n        job: item,\n        onPress: gotoJobDetail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }\n      });\n    },\n    ListHeaderComponent: function ListHeaderComponent() {\n      return React.createElement(View, {\n        style: styles.jobsCountWrap,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }\n      }, React.createElement(AppText, {\n        size: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }\n      }, jobs.length, \" jobs available\"));\n    },\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: onRefresh,\n      colors: [\"red\", \"blue\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    marginBottom: 30,\n    flex: 1\n  },\n  jobsCountWrap: {\n    paddingVertical: 7,\n    paddingLeft: 20,\n    borderBottomColor: \"#c1c1c1\",\n    borderBottomWidth: 1\n  }\n});\nexport default Home;","map":{"version":3,"sources":["/home/lekhu/Documents/David/Jobportal-Mobile-App/screens/homeStacks/home.js"],"names":["React","useState","ContainerFluid","JobBox","AppText","useFocusEffect","CommonActions","Axios","apiPath","Loader","Home","navigation","route","isLoading","setIsLoading","jobs","setJobs","_fetchJobs","get","then","res","data","resp","console","error","_searchJobs","url","post","response","gotoJobDetail","jobSlug","navigate","screen","params","getRouteParams","title","category","type","level","jobTitle","jobCat","jobType","jobLevel","keyword","useCallback","isActive","isSearching","catch","err","log","refreshing","setRefreshing","onRefresh","dispatch","setParams","styles","container","item","id","toString","jobsCountWrap","length","StyleSheet","create","marginBottom","flex","paddingVertical","paddingLeft","borderBottomColor","borderBottomWidth"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, FlatList, RefreshControl, StyleSheet, StatusBar } from \"react-native\";\nimport ContainerFluid from \"../../shared/containerFluid\";\nimport JobBox from \"../../shared/jobBox\";\nimport AppText from \"../../shared/appText\";\nimport { useFocusEffect, CommonActions } from \"@react-navigation/native\";\nimport Axios from \"axios\";\nimport { apiPath } from \"../../utils/constants/Consts\";\nimport Loader from \"../../shared/loader\";\n\nfunction Home({ navigation, route }) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [jobs, setJobs] = useState([]);\n\n  //async fetch jobs\n  const _fetchJobs = async () => {\n    try {\n      let data = await Axios.get(`${apiPath}/mobile-app-home`).then(\n        (res) => res.data\n      );\n      if (data.resp == 1) return data.jobs;\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  //async search jobs\n  const _searchJobs = async (data) => {\n    try {\n      let url = `${apiPath}/mobile-search`;\n      let response = await Axios.post(url, data).then((res) => res.data);\n      if (response.resp == 1) return response.jobs;\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  //navigate to job detail\n  const gotoJobDetail = (jobSlug) => {\n    navigation.navigate(\"HomeTab\", {\n      screen: \"JobDetail\",\n      params: {\n        jobSlug,\n      },\n    });\n  };\n\n  //get params of route\n  const getRouteParams = ({\n    title = null,\n    category = null,\n    type = null,\n    level = null,\n  } = {}) => {\n    let jobTitle = title;\n    let jobCat = category && [category];\n    let jobType = type && [type];\n    let jobLevel = level && [level];\n\n    return {\n      keyword: jobTitle,\n      category: jobCat,\n      type: jobType,\n      level: jobLevel,\n    };\n  };\n\n  // handle screen foucus\n  useFocusEffect(\n    React.useCallback(() => {\n      let isActive = true;\n      let isSearching = false;\n\n      //deconstruct route params if avaliable\n      const { keyword, category, type, level } = route.params\n        ? getRouteParams(route.params)\n        : {};\n\n      //if any route params defined , set isSearching true to search jobs\n      isSearching = keyword || category || type || level ? true : false;\n\n      if (isSearching) {\n        //search job on route paramas available\n        _searchJobs({\n          keyword,\n          category,\n          type,\n          level,\n        })\n          .then((jobs) => {\n            if (isActive && jobs) setJobs(jobs);\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      } else {\n        //fetch jobs if params are unavailable i.e no search happens\n        _fetchJobs()\n          .then((jobs) => {\n            if (isActive && jobs) setJobs(jobs);\n          })\n          .catch((err) => console.log(err))\n          .then(() => setIsLoading(false));\n      }\n\n      return () => {\n        isActive = false;\n      };\n    }, [route])\n  );\n\n  //handle refresh and refetch jobs\n  const [refreshing, setRefreshing] = React.useState(false);\n  const onRefresh = React.useCallback(() => {\n    setRefreshing(true);\n\n    // _fetchJobs().then((jobs) => {\n    //   if (jobs) setJobs(jobs);\n    // setRefreshing(false);\n    // });\n\n    //reset route params passed from search screen so default behaviour occurs\n    //default-behaviour : refetch jobs on screen foucus\n    navigation.dispatch(\n      CommonActions.setParams({\n        category: null,\n        title: null,\n        type: null,\n        level: null,\n      })\n    );\n\n    setRefreshing(false);\n  }, [refreshing, navigation]);\n\n  return (\n    <ContainerFluid>\n      <View style={styles.container}>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          // job list\n          <FlatList\n            data={jobs}\n            keyExtractor={(item) => item.id.toString()}\n            renderItem={({ item }) => (\n              <JobBox job={item} onPress={gotoJobDetail} />\n            )}\n            ListHeaderComponent={() => (\n              <View style={styles.jobsCountWrap}>\n                <AppText size={16}>{jobs.length} jobs available</AppText>\n              </View>\n            )}\n            refreshControl={\n              <RefreshControl\n                refreshing={refreshing}\n                onRefresh={onRefresh}\n                colors={[\"red\", \"blue\"]}\n              />\n            }\n          />\n          // job list\n        )}\n      </View>\n    </ContainerFluid>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 30,\n    flex: 1,\n  },\n  jobsCountWrap: {\n    paddingVertical: 7,\n    paddingLeft: 20,\n    borderBottomColor: \"#c1c1c1\",\n    borderBottomWidth: 1,\n  },\n});\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}